{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e4582102",
   "metadata": {},
   "source": [
    "# Exploring Hacker News Posts \n",
    "\n",
    "Hacker News is a website where users submit posts that other users can comment on.  There are two main types of posts, \"Ask HN\" and \"Show HN\".  \"Ask HN\" are specific questions users submit while \"Show HN\" are specific projects or pieces of work users submit.\n",
    "\n",
    "With the data we are given, we are trying to find out which of the two main types of posts receive more comments on average.  We will also determine if posting at certain times of the day is more advantageous when trying to receive more comments on average."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95cc39fe",
   "metadata": {},
   "source": [
    "### Importing and Reading data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "22cdef56",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Here we are importing the data set 'hacker_news.csv', reading it as a\n",
    "# list of lists, and assigning to the variable 'hn'.\n",
    "from csv import reader\n",
    "\n",
    "opened_file = open('hacker_news.csv', encoding=\"utf8\")\n",
    "read_file = reader(opened_file)\n",
    "hn = list(read_file)\n",
    "\n",
    "# We have created two lists, one with header information and\n",
    "# one without header information.\n",
    "headers = hn[0]\n",
    "hn = hn[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "66166487",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['id', 'title', 'url', 'num_points', 'num_comments', 'author', 'created_at']\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[['12579008',\n",
       "  'You have two days to comment if you want stem cells to be classified as your own',\n",
       "  'http://www.regulations.gov/document?D=FDA-2015-D-3719-0018',\n",
       "  '1',\n",
       "  '0',\n",
       "  'altstar',\n",
       "  '9/26/2016 3:26'],\n",
       " ['12579005',\n",
       "  'SQLAR  the SQLite Archiver',\n",
       "  'https://www.sqlite.org/sqlar/doc/trunk/README.md',\n",
       "  '1',\n",
       "  '0',\n",
       "  'blacksqr',\n",
       "  '9/26/2016 3:24'],\n",
       " ['12578997',\n",
       "  'What if we just printed a flatscreen television on the side of our boxes?',\n",
       "  'https://medium.com/vanmoof/our-secrets-out-f21c1f03fdc8#.ietxmez43',\n",
       "  '1',\n",
       "  '0',\n",
       "  'pavel_lishin',\n",
       "  '9/26/2016 3:19'],\n",
       " ['12578989',\n",
       "  'algorithmic music',\n",
       "  'http://cacm.acm.org/magazines/2011/7/109891-algorithmic-composition/fulltext',\n",
       "  '1',\n",
       "  '0',\n",
       "  'poindontcare',\n",
       "  '9/26/2016 3:16'],\n",
       " ['12578979',\n",
       "  'How the Data Vault Enables the Next-Gen Data Warehouse and Data Lake',\n",
       "  'https://www.talend.com/blog/2016/05/12/talend-and-Â\\x93the-data-vaultÂ\\x94',\n",
       "  '1',\n",
       "  '0',\n",
       "  'markgainor1',\n",
       "  '9/26/2016 3:14']]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displaying the first 5 rows of the list.\n",
    "print(headers)\n",
    "print('\\n')\n",
    "hn[0:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0f80536",
   "metadata": {},
   "source": [
    "### Splitting 'Ask HN' + 'Show HN\" + other posts\n",
    "\n",
    "It is time to make three lists and populate one with titles that start with **'Ask HN'**, another list with **'Show HN'**, and the last list do not have either (**'Other'**)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1fb6a00e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initializing three lists.\n",
    "ask_posts = []\n",
    "show_posts = []\n",
    "other_posts = []\n",
    "\n",
    "# Appending the post titles based on their titles, titles are\n",
    "# in the second column of the dataset.\n",
    "for row in hn:\n",
    "    title = row[1]\n",
    "    if title.lower().startswith('ask hn'):\n",
    "        ask_posts.append(row)\n",
    "    elif title.lower().startswith('show hn'):\n",
    "        show_posts.append(row)\n",
    "    else:\n",
    "        other_posts.append(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dd083a15",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of posts in Ask HN: 9139\n",
      "Total number of posts in Show HN 10158\n",
      "Total number of other posts: 273822\n"
     ]
    }
   ],
   "source": [
    "# Counting the number of posts in our three lists.\n",
    "print('Total number of posts in Ask HN:', len(ask_posts))\n",
    "print('Total number of posts in Show HN', len(show_posts))\n",
    "print('Total number of other posts:', len(other_posts))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7b6f0643",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.393478498741656"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# For every post in ask_posts, count the number of comments in each post then add to total_ask_comments.\n",
    "# Now find the avg. number of 'Ask HN' comments: Total number of 'Ask HN' comments / Total number of 'Ask HN' comments. \n",
    "total_ask_comments = 0\n",
    "\n",
    "for row in ask_posts:\n",
    "    num_comments = int(row[4])\n",
    "    total_ask_comments += num_comments\n",
    "\n",
    "avg_ask_comments = total_ask_comments / (len(ask_posts))\n",
    "avg_ask_comments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "51f45bd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.886099625910612"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# For every post in show_posts, count the number of comments in each post then add to total_show_comments.\n",
    "# Now find the avg. number of 'Show HN' comments: Total number of 'Show HN' comments / Total number of 'Show HN' comments.\n",
    "total_show_comments = 0\n",
    "\n",
    "for row in show_posts:\n",
    "    num_comments = int(row[4])\n",
    "    total_show_comments += num_comments\n",
    "\n",
    "avg_show_comments = total_show_comments / len(show_posts)\n",
    "avg_show_comments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "11ca9662",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average rounded number of comments on Ask HN posts =  10\n",
      "Average rounded number of comments on Show HN posts =  5\n"
     ]
    }
   ],
   "source": [
    "print('Average rounded number of comments on Ask HN posts = ', round(avg_ask_comments))\n",
    "print('Average rounded number of comments on Show HN posts = ', round(avg_show_comments))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a56a3693",
   "metadata": {},
   "source": [
    "Ask HN posts receive about double the comments that Show HN posts receive. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d0986e8",
   "metadata": {},
   "source": [
    "## Finding the number of Ask posts and comments by hour created\n",
    "\n",
    "Next, we'll determine if ask posts created at a certain time are more likely to attract comments. We'll use the following steps to perform this analysis:\n",
    "\n",
    "1.  Calculate the number of ask posts created in each hour of the day, along with the number of comments received.\n",
    "2.  Calculate the average number of comments ask posts receive by hour created.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "79655b5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the datetime module calling it dt\n",
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ccb99f7d",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['9/26/2016 2:53', 7],\n",
       " ['9/26/2016 1:17', 3],\n",
       " ['9/25/2016 22:57', 0],\n",
       " ['9/25/2016 22:48', 3],\n",
       " ['9/25/2016 21:50', 2],\n",
       " ['9/25/2016 19:30', 1],\n",
       " ['9/25/2016 19:22', 22],\n",
       " ['9/25/2016 17:55', 3],\n",
       " ['9/25/2016 15:48', 0],\n",
       " ['9/25/2016 15:35', 13],\n",
       " ['9/25/2016 15:28', 0],\n",
       " ['9/25/2016 14:43', 0],\n",
       " ['9/25/2016 14:17', 3],\n",
       " ['9/25/2016 13:08', 2],\n",
       " ['9/25/2016 11:27', 2],\n",
       " ['9/25/2016 10:51', 0],\n",
       " ['9/25/2016 10:47', 6],\n",
       " ['9/25/2016 9:04', 97],\n",
       " ['9/25/2016 7:09', 4],\n",
       " ['9/25/2016 3:00', 1],\n",
       " ['9/24/2016 23:04', 0],\n",
       " ['9/24/2016 22:02', 7],\n",
       " ['9/24/2016 21:18', 2],\n",
       " ['9/24/2016 20:58', 0],\n",
       " ['9/24/2016 19:57', 1],\n",
       " ['9/24/2016 19:02', 0],\n",
       " ['9/24/2016 17:55', 0],\n",
       " ['9/24/2016 17:27', 1],\n",
       " ['9/24/2016 16:50', 0],\n",
       " ['9/24/2016 16:03', 5],\n",
       " ['9/24/2016 15:29', 66],\n",
       " ['9/24/2016 14:03', 1],\n",
       " ['9/24/2016 10:10', 11],\n",
       " ['9/24/2016 8:46', 7],\n",
       " ['9/24/2016 8:39', 1],\n",
       " ['9/24/2016 8:38', 1],\n",
       " ['9/24/2016 8:28', 1],\n",
       " ['9/24/2016 3:36', 3],\n",
       " ['9/24/2016 0:21', 2],\n",
       " ['9/23/2016 23:38', 6],\n",
       " ['9/23/2016 23:35', 6],\n",
       " ['9/23/2016 22:13', 4],\n",
       " ['9/23/2016 20:58', 2],\n",
       " ['9/23/2016 20:42', 0],\n",
       " ['9/23/2016 20:23', 1],\n",
       " ['9/23/2016 20:18', 477],\n",
       " ['9/23/2016 19:33', 3],\n",
       " ['9/23/2016 19:32', 10],\n",
       " ['9/23/2016 18:56', 12],\n",
       " ['9/23/2016 18:53', 4],\n",
       " ['9/23/2016 17:45', 1],\n",
       " ['9/23/2016 17:35', 1],\n",
       " ['9/23/2016 17:28', 25],\n",
       " ['9/23/2016 16:56', 2],\n",
       " ['9/23/2016 16:14', 3],\n",
       " ['9/23/2016 12:39', 6],\n",
       " ['9/23/2016 9:58', 1],\n",
       " ['9/23/2016 4:47', 2],\n",
       " ['9/23/2016 2:28', 3],\n",
       " ['9/23/2016 1:56', 8],\n",
       " ['9/23/2016 1:24', 2],\n",
       " ['9/23/2016 1:23', 1],\n",
       " ['9/23/2016 0:58', 0],\n",
       " ['9/23/2016 0:11', 5],\n",
       " ['9/22/2016 21:45', 3],\n",
       " ['9/22/2016 21:19', 5],\n",
       " ['9/22/2016 19:58', 19],\n",
       " ['9/22/2016 19:42', 6],\n",
       " ['9/22/2016 19:40', 23],\n",
       " ['9/22/2016 19:18', 2],\n",
       " ['9/22/2016 18:16', 1],\n",
       " ['9/22/2016 17:43', 0],\n",
       " ['9/22/2016 17:38', 0],\n",
       " ['9/22/2016 17:27', 0],\n",
       " ['9/22/2016 17:27', 26],\n",
       " ['9/22/2016 17:05', 0],\n",
       " ['9/22/2016 16:34', 0],\n",
       " ['9/22/2016 15:44', 1],\n",
       " ['9/22/2016 15:18', 10],\n",
       " ['9/22/2016 15:18', 1],\n",
       " ['9/22/2016 14:49', 62],\n",
       " ['9/22/2016 13:11', 0],\n",
       " ['9/22/2016 12:58', 0],\n",
       " ['9/22/2016 12:55', 0],\n",
       " ['9/22/2016 12:50', 3],\n",
       " ['9/22/2016 11:52', 266],\n",
       " ['9/22/2016 6:25', 1],\n",
       " ['9/22/2016 6:19', 2],\n",
       " ['9/22/2016 5:03', 0],\n",
       " ['9/22/2016 4:55', 0],\n",
       " ['9/22/2016 0:47', 0],\n",
       " ['9/21/2016 23:37', 0],\n",
       " ['9/21/2016 23:03', 22],\n",
       " ['9/21/2016 21:14', 1],\n",
       " ['9/21/2016 20:53', 6],\n",
       " ['9/21/2016 20:35', 1],\n",
       " ['9/21/2016 20:33', 1],\n",
       " ['9/21/2016 19:30', 1],\n",
       " ['9/21/2016 19:18', 46],\n",
       " ['9/21/2016 18:39', 0],\n",
       " ['9/21/2016 18:11', 2],\n",
       " ['9/21/2016 17:56', 5],\n",
       " ['9/21/2016 17:46', 23],\n",
       " ['9/21/2016 17:36', 0],\n",
       " ['9/21/2016 17:24', 0],\n",
       " ['9/21/2016 14:50', 62],\n",
       " ['9/21/2016 14:35', 2],\n",
       " ['9/21/2016 13:49', 2],\n",
       " ['9/21/2016 13:42', 61],\n",
       " ['9/21/2016 12:24', 1],\n",
       " ['9/21/2016 12:17', 4],\n",
       " ['9/21/2016 12:00', 2],\n",
       " ['9/21/2016 11:28', 0],\n",
       " ['9/21/2016 10:41', 0],\n",
       " ['9/21/2016 9:49', 1],\n",
       " ['9/21/2016 8:26', 1],\n",
       " ['9/21/2016 8:16', 2],\n",
       " ['9/21/2016 7:12', 10],\n",
       " ['9/21/2016 5:27', 0],\n",
       " ['9/21/2016 4:58', 2],\n",
       " ['9/21/2016 4:02', 1],\n",
       " ['9/21/2016 2:45', 94],\n",
       " ['9/21/2016 2:36', 30],\n",
       " ['9/21/2016 0:38', 1],\n",
       " ['9/21/2016 0:31', 1],\n",
       " ['9/20/2016 23:20', 3],\n",
       " ['9/20/2016 22:48', 20],\n",
       " ['9/20/2016 21:41', 14],\n",
       " ['9/20/2016 21:07', 12],\n",
       " ['9/20/2016 21:00', 30],\n",
       " ['9/20/2016 20:37', 2],\n",
       " ['9/20/2016 19:39', 7],\n",
       " ['9/20/2016 19:20', 1],\n",
       " ['9/20/2016 18:45', 7],\n",
       " ['9/20/2016 18:37', 1],\n",
       " ['9/20/2016 18:30', 0],\n",
       " ['9/20/2016 18:20', 3],\n",
       " ['9/20/2016 17:41', 11],\n",
       " ['9/20/2016 17:32', 3],\n",
       " ['9/20/2016 16:35', 1],\n",
       " ['9/20/2016 16:17', 20],\n",
       " ['9/20/2016 16:08', 8],\n",
       " ['9/20/2016 15:30', 3],\n",
       " ['9/20/2016 14:54', 0],\n",
       " ['9/20/2016 14:42', 4],\n",
       " ['9/20/2016 14:22', 2],\n",
       " ['9/20/2016 14:21', 0],\n",
       " ['9/20/2016 12:11', 1],\n",
       " ['9/20/2016 12:09', 2],\n",
       " ['9/20/2016 11:29', 4],\n",
       " ['9/20/2016 11:23', 7],\n",
       " ['9/20/2016 11:02', 2],\n",
       " ['9/20/2016 8:32', 0],\n",
       " ['9/20/2016 8:03', 2],\n",
       " ['9/20/2016 7:20', 0],\n",
       " ['9/20/2016 6:43', 3],\n",
       " ['9/20/2016 6:04', 4],\n",
       " ['9/20/2016 5:13', 3],\n",
       " ['9/20/2016 5:07', 0],\n",
       " ['9/19/2016 23:55', 10],\n",
       " ['9/19/2016 23:31', 59],\n",
       " ['9/19/2016 22:50', 5],\n",
       " ['9/19/2016 21:48', 1],\n",
       " ['9/19/2016 21:42', 3],\n",
       " ['9/19/2016 21:19', 1],\n",
       " ['9/19/2016 19:57', 0],\n",
       " ['9/19/2016 19:40', 1],\n",
       " ['9/19/2016 19:21', 28],\n",
       " ['9/19/2016 19:04', 2],\n",
       " ['9/19/2016 18:55', 0],\n",
       " ['9/19/2016 18:51', 14],\n",
       " ['9/19/2016 18:28', 2],\n",
       " ['9/19/2016 18:23', 0],\n",
       " ['9/19/2016 18:16', 0],\n",
       " ['9/19/2016 16:40', 0],\n",
       " ['9/19/2016 16:04', 2],\n",
       " ['9/19/2016 15:57', 1],\n",
       " ['9/19/2016 15:54', 0],\n",
       " ['9/19/2016 15:51', 7],\n",
       " ['9/19/2016 15:31', 2],\n",
       " ['9/19/2016 15:15', 0],\n",
       " ['9/19/2016 14:43', 6],\n",
       " ['9/19/2016 14:36', 10],\n",
       " ['9/19/2016 14:21', 1],\n",
       " ['9/19/2016 13:40', 11],\n",
       " ['9/19/2016 12:54', 2],\n",
       " ['9/19/2016 9:45', 7],\n",
       " ['9/19/2016 9:42', 1],\n",
       " ['9/19/2016 8:31', 2],\n",
       " ['9/19/2016 7:44', 22],\n",
       " ['9/19/2016 6:06', 73],\n",
       " ['9/19/2016 2:07', 14],\n",
       " ['9/19/2016 0:16', 61],\n",
       " ['9/18/2016 23:05', 1],\n",
       " ['9/18/2016 18:35', 0],\n",
       " ['9/18/2016 18:33', 9],\n",
       " ['9/18/2016 17:30', 0],\n",
       " ['9/18/2016 17:28', 2],\n",
       " ['9/18/2016 16:24', 0],\n",
       " ['9/18/2016 16:05', 1],\n",
       " ['9/18/2016 15:51', 1],\n",
       " ['9/18/2016 15:24', 4],\n",
       " ['9/18/2016 14:48', 0],\n",
       " ['9/18/2016 14:20', 1],\n",
       " ['9/18/2016 8:58', 0],\n",
       " ['9/18/2016 5:41', 1],\n",
       " ['9/18/2016 3:40', 35],\n",
       " ['9/18/2016 3:38', 2],\n",
       " ['9/18/2016 2:20', 0],\n",
       " ['9/17/2016 23:48', 6],\n",
       " ['9/17/2016 23:40', 4],\n",
       " ['9/17/2016 22:23', 0],\n",
       " ['9/17/2016 21:18', 2],\n",
       " ['9/17/2016 19:01', 5],\n",
       " ['9/17/2016 18:47', 10],\n",
       " ['9/17/2016 18:34', 23],\n",
       " ['9/17/2016 18:16', 2],\n",
       " ['9/17/2016 17:43', 4],\n",
       " ['9/17/2016 16:36', 5],\n",
       " ['9/17/2016 16:07', 0],\n",
       " ['9/17/2016 15:58', 1],\n",
       " ['9/17/2016 15:58', 4],\n",
       " ['9/17/2016 15:44', 35],\n",
       " ['9/17/2016 15:02', 0],\n",
       " ['9/17/2016 13:03', 25],\n",
       " ['9/17/2016 10:35', 1],\n",
       " ['9/17/2016 10:17', 10],\n",
       " ['9/17/2016 9:57', 1],\n",
       " ['9/17/2016 8:41', 14],\n",
       " ['9/17/2016 7:34', 1],\n",
       " ['9/17/2016 6:35', 6],\n",
       " ['9/17/2016 4:07', 19],\n",
       " ['9/17/2016 3:48', 1],\n",
       " ['9/17/2016 2:00', 0],\n",
       " ['9/17/2016 1:06', 9],\n",
       " ['9/16/2016 22:56', 33],\n",
       " ['9/16/2016 22:56', 39],\n",
       " ['9/16/2016 22:09', 2],\n",
       " ['9/16/2016 21:39', 3],\n",
       " ['9/16/2016 21:19', 2],\n",
       " ['9/16/2016 21:02', 0],\n",
       " ['9/16/2016 20:51', 14],\n",
       " ['9/16/2016 20:51', 40],\n",
       " ['9/16/2016 20:28', 1],\n",
       " ['9/16/2016 19:46', 0],\n",
       " ['9/16/2016 19:28', 185],\n",
       " ['9/16/2016 19:00', 25],\n",
       " ['9/16/2016 18:14', 2],\n",
       " ['9/16/2016 18:11', 0],\n",
       " ['9/16/2016 18:08', 1],\n",
       " ['9/16/2016 18:04', 0],\n",
       " ['9/16/2016 17:56', 5],\n",
       " ['9/16/2016 16:38', 1],\n",
       " ['9/16/2016 15:59', 0],\n",
       " ['9/16/2016 15:47', 0],\n",
       " ['9/16/2016 14:39', 5],\n",
       " ['9/16/2016 13:43', 6],\n",
       " ['9/16/2016 13:16', 2],\n",
       " ['9/16/2016 12:06', 0],\n",
       " ['9/16/2016 11:47', 1],\n",
       " ['9/16/2016 11:46', 5],\n",
       " ['9/16/2016 10:49', 36],\n",
       " ['9/16/2016 9:31', 5],\n",
       " ['9/16/2016 8:32', 6],\n",
       " ['9/16/2016 8:29', 0],\n",
       " ['9/16/2016 8:26', 2],\n",
       " ['9/16/2016 6:49', 1],\n",
       " ['9/16/2016 6:06', 2],\n",
       " ['9/16/2016 5:55', 2],\n",
       " ['9/16/2016 4:56', 2],\n",
       " ['9/16/2016 3:54', 2],\n",
       " ['9/15/2016 22:42', 9],\n",
       " ['9/15/2016 22:34', 0],\n",
       " ['9/15/2016 22:09', 1],\n",
       " ['9/15/2016 21:09', 1],\n",
       " ['9/15/2016 21:07', 4],\n",
       " ['9/15/2016 21:01', 0],\n",
       " ['9/15/2016 20:54', 1],\n",
       " ['9/15/2016 19:58', 0],\n",
       " ['9/15/2016 19:50', 9],\n",
       " ['9/15/2016 19:22', 0],\n",
       " ['9/15/2016 18:30', 1],\n",
       " ['9/15/2016 18:26', 6],\n",
       " ['9/15/2016 17:57', 1],\n",
       " ['9/15/2016 17:00', 0],\n",
       " ['9/15/2016 16:36', 8],\n",
       " ['9/15/2016 16:30', 11],\n",
       " ['9/15/2016 16:28', 2],\n",
       " ['9/15/2016 16:27', 9],\n",
       " ['9/15/2016 16:03', 3],\n",
       " ['9/15/2016 15:45', 0],\n",
       " ['9/15/2016 15:27', 1],\n",
       " ['9/15/2016 15:04', 2],\n",
       " ['9/15/2016 14:52', 1],\n",
       " ['9/15/2016 14:17', 1],\n",
       " ['9/15/2016 14:15', 0],\n",
       " ['9/15/2016 13:51', 7],\n",
       " ['9/15/2016 13:50', 1],\n",
       " ['9/15/2016 13:46', 1],\n",
       " ['9/15/2016 13:21', 0],\n",
       " ['9/15/2016 12:45', 1],\n",
       " ['9/15/2016 12:00', 55],\n",
       " ['9/15/2016 9:17', 2],\n",
       " ['9/15/2016 8:40', 2],\n",
       " ['9/15/2016 7:49', 0],\n",
       " ['9/15/2016 7:30', 0],\n",
       " ['9/15/2016 7:14', 1],\n",
       " ['9/15/2016 7:11', 3],\n",
       " ['9/15/2016 6:07', 3],\n",
       " ['9/15/2016 6:06', 0],\n",
       " ['9/15/2016 3:23', 1],\n",
       " ['9/15/2016 2:04', 0],\n",
       " ['9/15/2016 1:34', 0],\n",
       " ['9/15/2016 1:11', 2],\n",
       " ['9/15/2016 0:12', 1],\n",
       " ['9/14/2016 23:28', 4],\n",
       " ['9/14/2016 23:26', 0],\n",
       " ['9/14/2016 22:39', 2],\n",
       " ['9/14/2016 22:32', 0],\n",
       " ['9/14/2016 20:54', 1],\n",
       " ['9/14/2016 20:46', 1],\n",
       " ['9/14/2016 20:19', 2],\n",
       " ['9/14/2016 20:19', 4],\n",
       " ['9/14/2016 18:32', 0],\n",
       " ['9/14/2016 18:08', 0],\n",
       " ['9/14/2016 18:02', 27],\n",
       " ['9/14/2016 17:55', 0],\n",
       " ['9/14/2016 17:52', 0],\n",
       " ['9/14/2016 17:45', 1],\n",
       " ['9/14/2016 17:29', 0],\n",
       " ['9/14/2016 17:11', 0],\n",
       " ['9/14/2016 17:06', 0],\n",
       " ['9/14/2016 16:42', 1],\n",
       " ['9/14/2016 15:27', 34],\n",
       " ['9/14/2016 15:23', 0],\n",
       " ['9/14/2016 15:10', 4],\n",
       " ['9/14/2016 15:09', 0],\n",
       " ['9/14/2016 14:55', 0],\n",
       " ['9/14/2016 14:32', 6],\n",
       " ['9/14/2016 14:31', 5],\n",
       " ['9/14/2016 14:22', 1],\n",
       " ['9/14/2016 14:21', 1],\n",
       " ['9/14/2016 13:20', 138],\n",
       " ['9/14/2016 13:17', 7],\n",
       " ['9/14/2016 10:57', 1],\n",
       " ['9/14/2016 10:13', 1],\n",
       " ['9/14/2016 9:05', 75],\n",
       " ['9/14/2016 7:02', 0],\n",
       " ['9/14/2016 5:54', 1],\n",
       " ['9/14/2016 1:50', 2],\n",
       " ['9/14/2016 0:09', 2],\n",
       " ['9/13/2016 22:07', 14],\n",
       " ['9/13/2016 21:43', 1],\n",
       " ['9/13/2016 21:27', 3],\n",
       " ['9/13/2016 21:15', 3],\n",
       " ['9/13/2016 21:09', 1],\n",
       " ['9/13/2016 20:48', 17],\n",
       " ['9/13/2016 19:26', 0],\n",
       " ['9/13/2016 18:21', 7],\n",
       " ['9/13/2016 17:51', 5],\n",
       " ['9/13/2016 17:16', 2],\n",
       " ['9/13/2016 16:36', 26],\n",
       " ['9/13/2016 16:22', 0],\n",
       " ['9/13/2016 15:25', 1],\n",
       " ['9/13/2016 14:59', 4],\n",
       " ['9/13/2016 13:57', 31],\n",
       " ['9/13/2016 13:44', 0],\n",
       " ['9/13/2016 13:07', 1],\n",
       " ['9/13/2016 11:55', 4],\n",
       " ['9/13/2016 11:49', 2],\n",
       " ['9/13/2016 11:47', 8],\n",
       " ['9/13/2016 11:19', 35],\n",
       " ['9/13/2016 11:04', 0],\n",
       " ['9/13/2016 10:48', 3],\n",
       " ['9/13/2016 10:16', 3],\n",
       " ['9/13/2016 9:14', 1],\n",
       " ['9/13/2016 8:10', 1],\n",
       " ['9/13/2016 8:02', 1],\n",
       " ['9/13/2016 8:01', 0],\n",
       " ['9/13/2016 6:25', 2],\n",
       " ['9/13/2016 4:42', 5],\n",
       " ['9/13/2016 3:50', 1],\n",
       " ['9/13/2016 3:46', 2],\n",
       " ['9/13/2016 3:28', 0],\n",
       " ['9/13/2016 2:52', 2],\n",
       " ['9/13/2016 2:51', 5],\n",
       " ['9/13/2016 2:15', 11],\n",
       " ['9/13/2016 1:58', 1],\n",
       " ['9/13/2016 1:09', 3],\n",
       " ['9/13/2016 0:39', 18],\n",
       " ['9/13/2016 0:36', 2],\n",
       " ['9/12/2016 23:57', 1],\n",
       " ['9/12/2016 21:26', 43],\n",
       " ['9/12/2016 20:29', 0],\n",
       " ['9/12/2016 20:28', 4],\n",
       " ['9/12/2016 19:25', 3],\n",
       " ['9/12/2016 19:05', 1],\n",
       " ['9/12/2016 18:29', 0],\n",
       " ['9/12/2016 18:19', 3],\n",
       " ['9/12/2016 18:07', 22],\n",
       " ['9/12/2016 17:59', 0],\n",
       " ['9/12/2016 17:22', 3],\n",
       " ['9/12/2016 17:16', 0],\n",
       " ['9/12/2016 16:52', 7],\n",
       " ['9/12/2016 16:51', 1],\n",
       " ['9/12/2016 15:28', 0],\n",
       " ['9/12/2016 14:52', 3],\n",
       " ['9/12/2016 13:23', 1],\n",
       " ['9/12/2016 13:19', 0],\n",
       " ['9/12/2016 13:18', 0],\n",
       " ['9/12/2016 12:58', 1],\n",
       " ['9/12/2016 12:50', 1],\n",
       " ['9/12/2016 12:39', 0],\n",
       " ['9/12/2016 12:04', 3],\n",
       " ['9/12/2016 10:50', 9],\n",
       " ['9/12/2016 8:33', 45],\n",
       " ['9/12/2016 7:47', 5],\n",
       " ['9/12/2016 7:39', 61],\n",
       " ['9/12/2016 6:26', 3],\n",
       " ['9/12/2016 5:57', 7],\n",
       " ['9/12/2016 4:38', 21],\n",
       " ['9/12/2016 4:29', 660],\n",
       " ['9/12/2016 3:33', 3],\n",
       " ['9/12/2016 2:39', 106],\n",
       " ['9/11/2016 22:09', 2],\n",
       " ['9/11/2016 19:31', 75],\n",
       " ['9/11/2016 18:47', 6],\n",
       " ['9/11/2016 18:09', 1],\n",
       " ['9/11/2016 17:54', 2],\n",
       " ['9/11/2016 15:17', 0],\n",
       " ['9/11/2016 15:03', 42],\n",
       " ['9/11/2016 12:26', 0],\n",
       " ['9/11/2016 5:47', 2],\n",
       " ['9/11/2016 5:43', 2],\n",
       " ['9/11/2016 5:09', 1],\n",
       " ['9/11/2016 4:25', 6],\n",
       " ['9/11/2016 2:39', 0],\n",
       " ['9/11/2016 1:28', 1],\n",
       " ['9/11/2016 0:50', 3],\n",
       " ['9/11/2016 0:20', 6],\n",
       " ['9/10/2016 23:39', 9],\n",
       " ['9/10/2016 23:08', 18],\n",
       " ['9/10/2016 22:30', 0],\n",
       " ['9/10/2016 22:19', 16],\n",
       " ['9/10/2016 21:18', 25],\n",
       " ['9/10/2016 21:01', 4],\n",
       " ['9/10/2016 20:57', 2],\n",
       " ['9/10/2016 18:05', 1],\n",
       " ['9/10/2016 17:48', 6],\n",
       " ['9/10/2016 16:01', 5],\n",
       " ['9/10/2016 14:56', 6],\n",
       " ['9/10/2016 14:31', 30],\n",
       " ['9/10/2016 13:38', 3],\n",
       " ['9/10/2016 12:24', 1],\n",
       " ['9/10/2016 12:11', 0],\n",
       " ['9/10/2016 10:13', 2],\n",
       " ['9/10/2016 9:07', 3],\n",
       " ['9/10/2016 8:39', 0],\n",
       " ['9/10/2016 8:07', 5],\n",
       " ['9/10/2016 7:49', 7],\n",
       " ['9/10/2016 3:44', 0],\n",
       " ['9/10/2016 2:33', 4],\n",
       " ['9/10/2016 1:58', 4],\n",
       " ['9/10/2016 0:17', 4],\n",
       " ['9/9/2016 20:25', 0],\n",
       " ['9/9/2016 20:10', 0],\n",
       " ['9/9/2016 20:09', 5],\n",
       " ['9/9/2016 19:42', 0],\n",
       " ['9/9/2016 18:51', 0],\n",
       " ['9/9/2016 18:40', 10],\n",
       " ['9/9/2016 16:59', 1],\n",
       " ['9/9/2016 16:41', 2],\n",
       " ['9/9/2016 15:16', 0],\n",
       " ['9/9/2016 14:20', 0],\n",
       " ['9/9/2016 13:25', 0],\n",
       " ['9/9/2016 12:46', 1],\n",
       " ['9/9/2016 12:36', 15],\n",
       " ['9/9/2016 12:35', 1],\n",
       " ['9/9/2016 11:08', 1],\n",
       " ['9/9/2016 10:54', 33],\n",
       " ['9/9/2016 10:10', 0],\n",
       " ['9/9/2016 10:09', 2],\n",
       " ['9/9/2016 10:03', 1],\n",
       " ['9/9/2016 6:59', 0],\n",
       " ['9/9/2016 3:32', 18],\n",
       " ['9/9/2016 0:14', 10],\n",
       " ['9/8/2016 23:52', 3],\n",
       " ['9/8/2016 23:32', 3],\n",
       " ['9/8/2016 23:23', 1],\n",
       " ['9/8/2016 21:27', 0],\n",
       " ['9/8/2016 20:16', 0],\n",
       " ['9/8/2016 19:35', 39],\n",
       " ['9/8/2016 18:20', 2],\n",
       " ['9/8/2016 17:57', 5],\n",
       " ['9/8/2016 17:53', 18],\n",
       " ['9/8/2016 17:47', 0],\n",
       " ['9/8/2016 17:45', 4],\n",
       " ['9/8/2016 16:53', 2],\n",
       " ['9/8/2016 15:42', 1],\n",
       " ['9/8/2016 15:18', 1],\n",
       " ['9/8/2016 15:09', 3],\n",
       " ['9/8/2016 14:39', 2],\n",
       " ['9/8/2016 13:06', 0],\n",
       " ['9/8/2016 13:05', 1],\n",
       " ['9/8/2016 12:58', 35],\n",
       " ['9/8/2016 11:23', 2],\n",
       " ['9/8/2016 10:45', 3],\n",
       " ['9/8/2016 10:28', 10],\n",
       " ['9/8/2016 10:18', 5],\n",
       " ['9/8/2016 6:34', 0],\n",
       " ['9/8/2016 3:32', 3],\n",
       " ['9/8/2016 0:50', 0],\n",
       " ['9/8/2016 0:37', 3],\n",
       " ['9/8/2016 0:10', 15],\n",
       " ['9/7/2016 23:57', 3],\n",
       " ['9/7/2016 22:53', 1],\n",
       " ['9/7/2016 22:48', 3],\n",
       " ['9/7/2016 22:14', 4],\n",
       " ['9/7/2016 21:27', 0],\n",
       " ['9/7/2016 21:16', 7],\n",
       " ['9/7/2016 20:28', 7],\n",
       " ['9/7/2016 20:27', 3],\n",
       " ['9/7/2016 20:15', 5],\n",
       " ['9/7/2016 20:03', 0],\n",
       " ['9/7/2016 18:44', 0],\n",
       " ['9/7/2016 18:33', 2],\n",
       " ['9/7/2016 16:11', 5],\n",
       " ['9/7/2016 15:57', 0],\n",
       " ['9/7/2016 15:49', 3],\n",
       " ['9/7/2016 15:26', 14],\n",
       " ['9/7/2016 14:12', 0],\n",
       " ['9/7/2016 13:17', 0],\n",
       " ['9/7/2016 12:20', 0],\n",
       " ['9/7/2016 11:37', 4],\n",
       " ['9/7/2016 11:32', 1],\n",
       " ['9/7/2016 11:14', 3],\n",
       " ['9/7/2016 11:02', 6],\n",
       " ['9/7/2016 10:43', 4],\n",
       " ['9/7/2016 9:40', 1],\n",
       " ['9/7/2016 8:31', 5],\n",
       " ['9/7/2016 8:31', 3],\n",
       " ['9/7/2016 2:21', 6],\n",
       " ['9/7/2016 2:12', 1],\n",
       " ['9/7/2016 2:11', 11],\n",
       " ['9/7/2016 1:47', 35],\n",
       " ['9/7/2016 1:34', 4],\n",
       " ['9/7/2016 1:18', 3],\n",
       " ['9/7/2016 1:02', 5],\n",
       " ['9/6/2016 23:45', 0],\n",
       " ['9/6/2016 22:59', 5],\n",
       " ['9/6/2016 22:59', 3],\n",
       " ['9/6/2016 22:18', 65],\n",
       " ['9/6/2016 21:02', 3],\n",
       " ['9/6/2016 20:15', 1],\n",
       " ['9/6/2016 17:23', 0],\n",
       " ['9/6/2016 17:22', 7],\n",
       " ['9/6/2016 17:11', 10],\n",
       " ['9/6/2016 16:45', 9],\n",
       " ['9/6/2016 15:52', 0],\n",
       " ['9/6/2016 15:26', 1],\n",
       " ['9/6/2016 15:02', 0],\n",
       " ['9/6/2016 14:16', 0],\n",
       " ['9/6/2016 13:36', 43],\n",
       " ['9/6/2016 13:08', 0],\n",
       " ['9/6/2016 12:57', 2],\n",
       " ['9/6/2016 12:53', 7],\n",
       " ['9/6/2016 12:03', 6],\n",
       " ['9/6/2016 10:11', 0],\n",
       " ['9/6/2016 10:10', 0],\n",
       " ['9/6/2016 9:58', 0],\n",
       " ['9/6/2016 9:51', 9],\n",
       " ['9/6/2016 9:14', 0],\n",
       " ['9/6/2016 6:08', 2],\n",
       " ['9/5/2016 22:31', 0],\n",
       " ['9/5/2016 20:01', 1],\n",
       " ['9/5/2016 19:48', 0],\n",
       " ['9/5/2016 19:13', 1],\n",
       " ['9/5/2016 19:08', 0],\n",
       " ['9/5/2016 18:36', 3],\n",
       " ['9/5/2016 17:58', 0],\n",
       " ['9/5/2016 17:15', 0],\n",
       " ['9/5/2016 15:10', 2],\n",
       " ['9/5/2016 13:56', 5],\n",
       " ['9/5/2016 13:45', 4],\n",
       " ['9/5/2016 13:19', 1],\n",
       " ['9/5/2016 12:34', 1],\n",
       " ['9/5/2016 12:13', 4],\n",
       " ['9/5/2016 11:13', 5],\n",
       " ['9/5/2016 11:06', 4],\n",
       " ['9/5/2016 10:08', 2],\n",
       " ['9/5/2016 9:32', 2],\n",
       " ['9/5/2016 9:06', 3],\n",
       " ['9/5/2016 8:35', 4],\n",
       " ['9/5/2016 7:27', 39],\n",
       " ['9/5/2016 7:12', 2],\n",
       " ['9/5/2016 6:58', 40],\n",
       " ['9/5/2016 6:19', 1],\n",
       " ['9/5/2016 5:36', 85],\n",
       " ['9/5/2016 3:04', 39],\n",
       " ['9/5/2016 2:45', 1],\n",
       " ['9/5/2016 2:41', 0],\n",
       " ['9/5/2016 1:42', 2],\n",
       " ['9/5/2016 1:40', 2],\n",
       " ['9/4/2016 21:48', 0],\n",
       " ['9/4/2016 21:34', 6],\n",
       " ['9/4/2016 21:26', 39],\n",
       " ['9/4/2016 21:17', 47],\n",
       " ['9/4/2016 20:41', 0],\n",
       " ['9/4/2016 19:57', 2],\n",
       " ['9/4/2016 19:29', 5],\n",
       " ['9/4/2016 18:23', 1],\n",
       " ['9/4/2016 17:53', 0],\n",
       " ['9/4/2016 17:48', 6],\n",
       " ['9/4/2016 17:33', 5],\n",
       " ['9/4/2016 16:55', 0],\n",
       " ['9/4/2016 16:46', 1],\n",
       " ['9/4/2016 16:18', 0],\n",
       " ['9/4/2016 15:09', 3],\n",
       " ['9/4/2016 14:17', 3],\n",
       " ['9/4/2016 14:15', 0],\n",
       " ['9/4/2016 13:54', 1],\n",
       " ['9/4/2016 13:50', 1],\n",
       " ['9/4/2016 13:41', 84],\n",
       " ['9/4/2016 13:36', 3],\n",
       " ['9/4/2016 13:34', 34],\n",
       " ['9/4/2016 12:59', 3],\n",
       " ['9/4/2016 12:26', 3],\n",
       " ['9/4/2016 11:34', 1],\n",
       " ['9/4/2016 9:54', 1],\n",
       " ['9/4/2016 8:31', 6],\n",
       " ['9/4/2016 7:43', 130],\n",
       " ['9/4/2016 5:41', 3],\n",
       " ['9/4/2016 5:09', 6],\n",
       " ['9/4/2016 3:02', 9],\n",
       " ['9/4/2016 2:57', 1],\n",
       " ['9/4/2016 0:00', 110],\n",
       " ['9/3/2016 23:16', 3],\n",
       " ['9/3/2016 20:25', 1],\n",
       " ['9/3/2016 19:59', 6],\n",
       " ['9/3/2016 19:01', 4],\n",
       " ['9/3/2016 18:45', 1],\n",
       " ['9/3/2016 17:25', 6],\n",
       " ['9/3/2016 17:05', 5],\n",
       " ['9/3/2016 16:14', 3],\n",
       " ['9/3/2016 16:10', 75],\n",
       " ['9/3/2016 15:32', 3],\n",
       " ['9/3/2016 14:31', 5],\n",
       " ['9/3/2016 12:02', 4],\n",
       " ['9/3/2016 10:58', 34],\n",
       " ['9/3/2016 10:06', 3],\n",
       " ['9/3/2016 9:02', 0],\n",
       " ['9/3/2016 1:50', 1],\n",
       " ['9/2/2016 23:53', 6],\n",
       " ['9/2/2016 22:27', 0],\n",
       " ['9/2/2016 22:03', 38],\n",
       " ['9/2/2016 21:59', 0],\n",
       " ['9/2/2016 21:30', 0],\n",
       " ['9/2/2016 19:56', 6],\n",
       " ['9/2/2016 19:31', 105],\n",
       " ['9/2/2016 18:52', 1],\n",
       " ['9/2/2016 18:19', 4],\n",
       " ['9/2/2016 18:10', 49],\n",
       " ['9/2/2016 17:57', 3],\n",
       " ['9/2/2016 16:37', 4],\n",
       " ['9/2/2016 15:04', 0],\n",
       " ['9/2/2016 14:24', 2],\n",
       " ['9/2/2016 14:13', 1],\n",
       " ['9/2/2016 14:13', 0],\n",
       " ['9/2/2016 13:58', 1],\n",
       " ['9/2/2016 13:35', 0],\n",
       " ['9/2/2016 13:29', 0],\n",
       " ['9/2/2016 12:55', 223],\n",
       " ['9/2/2016 12:41', 0],\n",
       " ['9/2/2016 10:48', 2],\n",
       " ['9/2/2016 6:32', 0],\n",
       " ['9/2/2016 5:18', 1],\n",
       " ['9/2/2016 4:39', 13],\n",
       " ['9/2/2016 4:21', 1],\n",
       " ['9/2/2016 2:08', 8],\n",
       " ['9/2/2016 2:05', 8],\n",
       " ['9/2/2016 2:03', 0],\n",
       " ['9/1/2016 21:34', 4],\n",
       " ['9/1/2016 20:23', 32],\n",
       " ['9/1/2016 16:27', 3],\n",
       " ['9/1/2016 15:59', 0],\n",
       " ['9/1/2016 15:00', 37],\n",
       " ['9/1/2016 15:00', 166],\n",
       " ['9/1/2016 15:00', 85],\n",
       " ['9/1/2016 15:00', 910],\n",
       " ['9/1/2016 14:37', 8],\n",
       " ['9/1/2016 14:21', 0],\n",
       " ['9/1/2016 14:17', 0],\n",
       " ['9/1/2016 14:00', 2],\n",
       " ['9/1/2016 13:20', 0],\n",
       " ['9/1/2016 12:25', 4],\n",
       " ['9/1/2016 12:23', 1],\n",
       " ['9/1/2016 12:22', 1],\n",
       " ['9/1/2016 12:09', 2],\n",
       " ['9/1/2016 11:27', 0],\n",
       " ['9/1/2016 10:48', 2],\n",
       " ['9/1/2016 9:58', 3],\n",
       " ['9/1/2016 9:44', 2],\n",
       " ['9/1/2016 8:36', 4],\n",
       " ['9/1/2016 8:16', 1],\n",
       " ['9/1/2016 7:39', 0],\n",
       " ['9/1/2016 4:48', 2],\n",
       " ['9/1/2016 4:31', 2],\n",
       " ['9/1/2016 3:09', 10],\n",
       " ['9/1/2016 2:40', 0],\n",
       " ['9/1/2016 1:13', 6],\n",
       " ['9/1/2016 0:14', 1],\n",
       " ['8/31/2016 23:14', 8],\n",
       " ['8/31/2016 22:51', 2],\n",
       " ['8/31/2016 20:13', 3],\n",
       " ['8/31/2016 19:56', 3],\n",
       " ['8/31/2016 19:45', 6],\n",
       " ['8/31/2016 18:39', 0],\n",
       " ['8/31/2016 18:34', 0],\n",
       " ['8/31/2016 18:26', 0],\n",
       " ['8/31/2016 18:21', 9],\n",
       " ['8/31/2016 18:20', 0],\n",
       " ['8/31/2016 18:09', 0],\n",
       " ['8/31/2016 16:54', 8],\n",
       " ['8/31/2016 16:29', 11],\n",
       " ['8/31/2016 16:21', 3],\n",
       " ['8/31/2016 16:01', 17],\n",
       " ['8/31/2016 15:42', 0],\n",
       " ['8/31/2016 13:55', 172],\n",
       " ['8/31/2016 11:41', 6],\n",
       " ['8/31/2016 11:25', 4],\n",
       " ['8/31/2016 10:39', 3],\n",
       " ['8/31/2016 9:47', 1],\n",
       " ['8/31/2016 9:20', 0],\n",
       " ['8/31/2016 8:46', 93],\n",
       " ['8/31/2016 7:31', 0],\n",
       " ['8/31/2016 7:22', 5],\n",
       " ['8/31/2016 7:21', 4],\n",
       " ['8/31/2016 3:48', 2],\n",
       " ['8/31/2016 2:20', 27],\n",
       " ['8/31/2016 1:23', 5],\n",
       " ['8/31/2016 1:00', 11],\n",
       " ['8/31/2016 0:30', 0],\n",
       " ['8/30/2016 23:50', 0],\n",
       " ['8/30/2016 21:56', 10],\n",
       " ['8/30/2016 21:11', 6],\n",
       " ['8/30/2016 20:57', 6],\n",
       " ['8/30/2016 20:46', 9],\n",
       " ['8/30/2016 20:45', 82],\n",
       " ['8/30/2016 20:32', 4],\n",
       " ['8/30/2016 20:31', 0],\n",
       " ['8/30/2016 20:09', 5],\n",
       " ['8/30/2016 19:36', 0],\n",
       " ['8/30/2016 19:34', 3],\n",
       " ['8/30/2016 19:28', 10],\n",
       " ['8/30/2016 19:17', 4],\n",
       " ['8/30/2016 18:38', 0],\n",
       " ['8/30/2016 18:08', 0],\n",
       " ['8/30/2016 18:01', 0],\n",
       " ['8/30/2016 16:40', 6],\n",
       " ['8/30/2016 16:09', 12],\n",
       " ['8/30/2016 15:33', 2],\n",
       " ['8/30/2016 15:27', 9],\n",
       " ['8/30/2016 15:18', 1],\n",
       " ['8/30/2016 14:54', 0],\n",
       " ['8/30/2016 14:48', 22],\n",
       " ['8/30/2016 13:53', 2],\n",
       " ['8/30/2016 13:00', 30],\n",
       " ['8/30/2016 12:56', 0],\n",
       " ['8/30/2016 12:56', 2],\n",
       " ['8/30/2016 12:43', 6],\n",
       " ['8/30/2016 12:29', 2],\n",
       " ['8/30/2016 12:25', 1],\n",
       " ['8/30/2016 11:58', 1],\n",
       " ['8/30/2016 11:20', 4],\n",
       " ['8/30/2016 11:08', 15],\n",
       " ['8/30/2016 10:26', 1],\n",
       " ['8/30/2016 8:28', 1],\n",
       " ['8/30/2016 7:53', 0],\n",
       " ['8/30/2016 5:57', 11],\n",
       " ['8/30/2016 5:18', 8],\n",
       " ['8/30/2016 4:43', 0],\n",
       " ['8/30/2016 4:25', 1],\n",
       " ['8/30/2016 2:44', 1],\n",
       " ['8/30/2016 2:42', 17],\n",
       " ['8/30/2016 2:14', 1],\n",
       " ['8/30/2016 0:49', 3],\n",
       " ['8/29/2016 22:13', 5],\n",
       " ['8/29/2016 22:12', 3],\n",
       " ['8/29/2016 21:50', 1],\n",
       " ['8/29/2016 21:31', 1],\n",
       " ['8/29/2016 21:19', 2],\n",
       " ['8/29/2016 20:47', 0],\n",
       " ['8/29/2016 19:35', 0],\n",
       " ['8/29/2016 19:33', 2],\n",
       " ['8/29/2016 19:27', 0],\n",
       " ['8/29/2016 18:31', 0],\n",
       " ['8/29/2016 18:26', 4],\n",
       " ['8/29/2016 18:07', 3],\n",
       " ['8/29/2016 17:16', 1],\n",
       " ['8/29/2016 16:41', 5],\n",
       " ['8/29/2016 16:08', 0],\n",
       " ['8/29/2016 15:57', 51],\n",
       " ['8/29/2016 15:22', 0],\n",
       " ['8/29/2016 15:07', 2],\n",
       " ['8/29/2016 14:31', 52],\n",
       " ['8/29/2016 13:15', 13],\n",
       " ['8/29/2016 13:13', 6],\n",
       " ['8/29/2016 13:03', 8],\n",
       " ['8/29/2016 13:01', 0],\n",
       " ['8/29/2016 12:20', 2],\n",
       " ['8/29/2016 11:48', 0],\n",
       " ['8/29/2016 10:25', 0],\n",
       " ['8/29/2016 10:20', 4],\n",
       " ['8/29/2016 9:18', 9],\n",
       " ['8/29/2016 8:36', 5],\n",
       " ['8/29/2016 8:23', 0],\n",
       " ['8/29/2016 7:56', 4],\n",
       " ['8/29/2016 0:07', 1],\n",
       " ['8/28/2016 23:46', 57],\n",
       " ['8/28/2016 23:40', 0],\n",
       " ['8/28/2016 21:24', 2],\n",
       " ['8/28/2016 20:38', 4],\n",
       " ['8/28/2016 20:16', 2],\n",
       " ['8/28/2016 20:05', 0],\n",
       " ['8/28/2016 18:58', 3],\n",
       " ['8/28/2016 18:24', 6],\n",
       " ['8/28/2016 18:06', 2],\n",
       " ['8/28/2016 17:42', 1],\n",
       " ['8/28/2016 16:58', 5],\n",
       " ['8/28/2016 15:40', 2],\n",
       " ['8/28/2016 14:41', 3],\n",
       " ['8/28/2016 14:34', 7],\n",
       " ['8/28/2016 14:16', 106],\n",
       " ['8/28/2016 12:33', 221],\n",
       " ['8/28/2016 11:07', 2],\n",
       " ['8/28/2016 10:13', 3],\n",
       " ['8/28/2016 7:11', 0],\n",
       " ['8/28/2016 6:18', 1],\n",
       " ['8/28/2016 5:24', 1],\n",
       " ['8/28/2016 5:19', 5],\n",
       " ['8/28/2016 4:22', 8],\n",
       " ['8/28/2016 2:00', 4],\n",
       " ['8/28/2016 1:00', 9],\n",
       " ['8/28/2016 0:03', 1],\n",
       " ['8/27/2016 23:52', 10],\n",
       " ['8/27/2016 22:29', 88],\n",
       " ['8/27/2016 21:36', 6],\n",
       " ['8/27/2016 20:09', 3],\n",
       " ['8/27/2016 19:42', 3],\n",
       " ['8/27/2016 19:38', 5],\n",
       " ['8/27/2016 19:31', 93],\n",
       " ['8/27/2016 19:03', 2],\n",
       " ['8/27/2016 18:05', 11],\n",
       " ['8/27/2016 17:07', 1],\n",
       " ['8/27/2016 15:21', 3],\n",
       " ['8/27/2016 13:20', 1],\n",
       " ['8/27/2016 13:15', 5],\n",
       " ['8/27/2016 12:09', 5],\n",
       " ['8/27/2016 11:44', 4],\n",
       " ['8/27/2016 11:33', 21],\n",
       " ['8/27/2016 10:25', 3],\n",
       " ['8/27/2016 8:42', 0],\n",
       " ['8/27/2016 6:19', 7],\n",
       " ['8/27/2016 5:56', 2],\n",
       " ['8/27/2016 2:53', 0],\n",
       " ['8/27/2016 1:47', 2],\n",
       " ['8/27/2016 0:57', 2],\n",
       " ['8/26/2016 22:56', 1],\n",
       " ['8/26/2016 22:38', 0],\n",
       " ['8/26/2016 20:54', 3],\n",
       " ['8/26/2016 20:22', 5],\n",
       " ['8/26/2016 19:25', 15],\n",
       " ['8/26/2016 16:10', 2],\n",
       " ['8/26/2016 15:39', 1],\n",
       " ['8/26/2016 15:36', 0],\n",
       " ['8/26/2016 15:23', 15],\n",
       " ['8/26/2016 15:08', 0],\n",
       " ['8/26/2016 15:07', 0],\n",
       " ['8/26/2016 14:28', 1],\n",
       " ['8/26/2016 14:12', 3],\n",
       " ['8/26/2016 10:01', 1],\n",
       " ['8/26/2016 9:44', 2],\n",
       " ['8/26/2016 8:39', 24],\n",
       " ['8/26/2016 6:57', 1],\n",
       " ['8/26/2016 6:35', 0],\n",
       " ['8/26/2016 3:48', 0],\n",
       " ['8/26/2016 2:19', 6],\n",
       " ['8/26/2016 1:54', 10],\n",
       " ['8/26/2016 1:39', 7],\n",
       " ['8/26/2016 0:49', 1],\n",
       " ['8/25/2016 21:49', 5],\n",
       " ['8/25/2016 21:16', 0],\n",
       " ['8/25/2016 21:11', 8],\n",
       " ['8/25/2016 20:04', 0],\n",
       " ['8/25/2016 18:53', 0],\n",
       " ['8/25/2016 17:43', 12],\n",
       " ['8/25/2016 17:37', 5],\n",
       " ['8/25/2016 16:00', 3],\n",
       " ['8/25/2016 15:31', 10],\n",
       " ['8/25/2016 15:18', 1],\n",
       " ['8/25/2016 15:07', 59],\n",
       " ['8/25/2016 14:51', 1],\n",
       " ['8/25/2016 14:36', 0],\n",
       " ['8/25/2016 13:58', 0],\n",
       " ['8/25/2016 12:47', 2],\n",
       " ['8/25/2016 12:22', 8],\n",
       " ['8/25/2016 11:20', 6],\n",
       " ['8/25/2016 10:49', 2],\n",
       " ['8/25/2016 10:03', 2],\n",
       " ['8/25/2016 9:59', 1],\n",
       " ['8/25/2016 7:33', 5],\n",
       " ['8/25/2016 7:12', 2],\n",
       " ['8/25/2016 6:59', 7],\n",
       " ['8/25/2016 5:35', 7],\n",
       " ['8/25/2016 4:48', 0],\n",
       " ['8/25/2016 3:35', 2],\n",
       " ['8/25/2016 1:54', 2],\n",
       " ['8/25/2016 1:17', 42],\n",
       " ['8/24/2016 23:54', 1],\n",
       " ['8/24/2016 22:41', 10],\n",
       " ['8/24/2016 22:34', 2],\n",
       " ['8/24/2016 22:04', 6],\n",
       " ['8/24/2016 21:52', 6],\n",
       " ['8/24/2016 21:16', 0],\n",
       " ['8/24/2016 21:02', 9],\n",
       " ['8/24/2016 20:27', 1],\n",
       " ['8/24/2016 19:50', 0],\n",
       " ['8/24/2016 18:41', 1],\n",
       " ['8/24/2016 17:38', 1],\n",
       " ['8/24/2016 16:31', 0],\n",
       " ['8/24/2016 16:11', 0],\n",
       " ['8/24/2016 16:03', 2],\n",
       " ['8/24/2016 15:23', 2],\n",
       " ['8/24/2016 14:48', 2],\n",
       " ['8/24/2016 14:10', 0],\n",
       " ['8/24/2016 13:54', 0],\n",
       " ['8/24/2016 12:09', 1],\n",
       " ['8/24/2016 12:07', 2],\n",
       " ['8/24/2016 11:54', 26],\n",
       " ['8/24/2016 10:50', 10],\n",
       " ['8/24/2016 9:57', 83],\n",
       " ['8/24/2016 8:11', 0],\n",
       " ['8/24/2016 6:48', 0],\n",
       " ['8/24/2016 6:17', 1],\n",
       " ['8/24/2016 5:56', 0],\n",
       " ['8/24/2016 3:41', 5],\n",
       " ['8/24/2016 2:35', 1],\n",
       " ['8/24/2016 2:15', 23],\n",
       " ['8/24/2016 2:03', 2],\n",
       " ['8/24/2016 0:05', 234],\n",
       " ['8/23/2016 23:22', 6],\n",
       " ['8/23/2016 21:56', 1],\n",
       " ['8/23/2016 21:02', 3],\n",
       " ['8/23/2016 20:46', 0],\n",
       " ['8/23/2016 20:00', 2],\n",
       " ['8/23/2016 19:11', 2],\n",
       " ['8/23/2016 19:05', 1],\n",
       " ['8/23/2016 18:35', 22],\n",
       " ['8/23/2016 17:58', 5],\n",
       " ['8/23/2016 17:01', 0],\n",
       " ['8/23/2016 16:51', 3],\n",
       " ['8/23/2016 15:01', 5],\n",
       " ['8/23/2016 14:36', 2],\n",
       " ['8/23/2016 14:23', 1],\n",
       " ['8/23/2016 13:49', 10],\n",
       " ['8/23/2016 13:48', 4],\n",
       " ['8/23/2016 13:23', 26],\n",
       " ['8/23/2016 13:13', 2],\n",
       " ['8/23/2016 12:59', 6],\n",
       " ['8/23/2016 12:43', 1],\n",
       " ['8/23/2016 12:43', 4],\n",
       " ['8/23/2016 12:35', 26],\n",
       " ['8/23/2016 12:34', 0],\n",
       " ['8/23/2016 11:50', 8],\n",
       " ['8/23/2016 8:52', 3],\n",
       " ['8/23/2016 7:29', 2],\n",
       " ['8/23/2016 4:32', 3],\n",
       " ['8/23/2016 3:50', 12],\n",
       " ['8/23/2016 1:47', 0],\n",
       " ['8/23/2016 1:17', 0],\n",
       " ['8/23/2016 0:57', 0],\n",
       " ['8/23/2016 0:53', 15],\n",
       " ['8/22/2016 22:28', 0],\n",
       " ['8/22/2016 20:56', 1],\n",
       " ['8/22/2016 19:55', 0],\n",
       " ['8/22/2016 19:28', 9],\n",
       " ['8/22/2016 18:23', 3],\n",
       " ['8/22/2016 18:01', 6],\n",
       " ['8/22/2016 17:17', 8],\n",
       " ['8/22/2016 17:05', 3],\n",
       " ['8/22/2016 17:04', 0],\n",
       " ['8/22/2016 16:56', 0],\n",
       " ['8/22/2016 16:46', 0],\n",
       " ['8/22/2016 16:41', 44],\n",
       " ['8/22/2016 15:14', 0],\n",
       " ['8/22/2016 15:06', 1],\n",
       " ['8/22/2016 14:46', 126],\n",
       " ['8/22/2016 14:45', 1],\n",
       " ['8/22/2016 14:38', 1],\n",
       " ['8/22/2016 13:52', 1],\n",
       " ...]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating an empty list then iterating over ask_posts to append the\n",
    "# created_at column and number of comments from the dataset.\n",
    "\n",
    "result_list = []\n",
    "\n",
    "for row in ask_posts:\n",
    "    created_at = row[6]\n",
    "    comments = int(row[4])\n",
    "    result_list.append([created_at, comments])\n",
    "result_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "00f1b65d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of posts created during each hour of the day: {2: 269, 1: 282, 22: 383, 21: 518, 19: 552, 17: 587, 15: 646, 14: 513, 13: 444, 11: 312, 10: 282, 9: 222, 7: 226, 3: 271, 23: 343, 20: 510, 16: 579, 8: 257, 0: 301, 18: 614, 12: 342, 4: 243, 6: 234, 5: 209}\n",
      "Number of comments ask posts created at each of received: {2: 2996, 1: 2089, 22: 3372, 21: 4500, 19: 3954, 17: 5547, 15: 18525, 14: 4972, 13: 7245, 11: 2797, 10: 3013, 9: 1477, 7: 1585, 3: 2154, 23: 2297, 20: 4462, 16: 4466, 8: 2362, 0: 2277, 18: 4877, 12: 4234, 4: 2360, 6: 1587, 5: 1838}\n"
     ]
    }
   ],
   "source": [
    "# Here we are parsing the date info from column 0 of result_list and getting the hour info from each as well.\n",
    "# Then we are counting how many ask posts are created in each our and how many comments there were.\n",
    "\n",
    "counts_by_hour = {}\n",
    "comments_by_hour = {}\n",
    "\n",
    "for row in result_list:\n",
    "    post_created = row[0]\n",
    "    comments_count = row[1]\n",
    "    date_created = dt.datetime.strptime(post_created, \"%m/%d/%Y %H:%M\")\n",
    "    hour_created = date_created.hour\n",
    "    if hour_created in counts_by_hour:\n",
    "        counts_by_hour[hour_created] += 1\n",
    "        comments_by_hour[hour_created] += comments_count\n",
    "    else:\n",
    "        counts_by_hour[hour_created] = 1\n",
    "        comments_by_hour[hour_created] = comments_count\n",
    "\n",
    "print(\"Number of posts created during each hour of the day:\", counts_by_hour)\n",
    "print(\"Number of comments ask posts created at each of received:\", comments_by_hour)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "51baecc1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[2, 11.137546468401487],\n",
       " [1, 7.407801418439717],\n",
       " [22, 8.804177545691905],\n",
       " [21, 8.687258687258687],\n",
       " [19, 7.163043478260869],\n",
       " [17, 9.449744463373083],\n",
       " [15, 28.676470588235293],\n",
       " [14, 9.692007797270955],\n",
       " [13, 16.31756756756757],\n",
       " [11, 8.96474358974359],\n",
       " [10, 10.684397163120567],\n",
       " [9, 6.653153153153153],\n",
       " [7, 7.013274336283186],\n",
       " [3, 7.948339483394834],\n",
       " [23, 6.696793002915452],\n",
       " [20, 8.749019607843136],\n",
       " [16, 7.713298791018998],\n",
       " [8, 9.190661478599221],\n",
       " [0, 7.5647840531561465],\n",
       " [18, 7.94299674267101],\n",
       " [12, 12.380116959064328],\n",
       " [4, 9.7119341563786],\n",
       " [6, 6.782051282051282],\n",
       " [5, 8.794258373205741]]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating the average number of comments \"Ask HN\" posts receive by hour created.\n",
    "\n",
    "avg_by_hour = []\n",
    "\n",
    "for hour in counts_by_hour:\n",
    "    avg_by_hour.append([hour, comments_by_hour[hour] / counts_by_hour[hour]])\n",
    "avg_by_hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "65fa17af",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 5 Hours for 'Ask HN' Posts Comments:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[[28.676470588235293, 15],\n",
       " [16.31756756756757, 13],\n",
       " [12.380116959064328, 12],\n",
       " [11.137546468401487, 2],\n",
       " [10.684397163120567, 10]]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We want to swap the elements in avg_by_hour so the average comments are the first column\n",
    "# and the hour created is the second column.\n",
    "\n",
    "swap_avg_by_hour = []\n",
    "\n",
    "for row in avg_by_hour:\n",
    "    hour = row[0]\n",
    "    comments = row[1]\n",
    "    swap_avg_by_hour.append([row[1], row[0]])\n",
    "\n",
    "# Here we are sorting the swapped list so list shows the average number of comments starting\n",
    "# from the most and descending to the least, and then printing the top 5.\n",
    "\n",
    "sorted_swap = sorted(swap_avg_by_hour, reverse = True)\n",
    "print(\"Top 5 Hours for 'Ask HN' Posts Comments:\")\n",
    "sorted_swap[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "38d0bdc4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 5 Hours for Ask Posts Comments\n",
      "-----------------------------------\n",
      "15:00: 28.68 average comments per post\n",
      "13:00: 16.32 average comments per post\n",
      "12:00: 12.38 average comments per post\n",
      "02:00: 11.14 average comments per post\n",
      "10:00: 10.68 average comments per post\n"
     ]
    }
   ],
   "source": [
    "# Here we are printing the hour and average in a particular format to make it\n",
    "# easier to read.\n",
    "\n",
    "string = \"Top 5 Hours for Ask Posts Comments\"\n",
    "print(string)\n",
    "print(\"-----------------------------------\")\n",
    "time_format = \"%H\"\n",
    "\n",
    "for row in sorted_swap[:5]:\n",
    "    date = dt.datetime.strptime(str(row[1]),'%H')\n",
    "    time = date.strftime('%H:%M')\n",
    "    template = \"{}: {:.2f} average comments per post\"\n",
    "    print(template.format(time,row[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6f44bab",
   "metadata": {},
   "source": [
    "There are times to post during the day that will give you a higher chance of receiving comments.  15:00 (3 pm) is by far the best time to post something in the hopes of getting more comments.  3 pm can give you more than double the comments compared to most other times in the top 5 hours of the day.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8830603",
   "metadata": {},
   "source": [
    "# You can use guided projects to build a portfolio to showcase to potential employers, so we encourage you to keep working on this. Here are some next steps for you to consider:\n",
    "\n",
    "Determine if show or ask posts receive more points on average.\n",
    "Determine if posts created at a certain time are more likely to receive more points.\n",
    "Compare your results to the average number of comments and points other posts receive.\n",
    "Use Dataquest's data science project style guide to format your project.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
